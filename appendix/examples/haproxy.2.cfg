# Пример работы по схеме:
#
# КЛИЕНТ <-- TLS-соединение с взаимной аутентификацией (белорусские криптонаборы) с проверкой СОС --> HAPROXY <-- http-соединение --> WEB-СЕРВЕР
#
# Примечание:
# В случае соединения по 443 КЛИЕНТ устанавливает tls-соединение с HAPROXY и, в случае успеха, HAPROXY передает КЛИЕНТУ данные своего соединения с WEB-СЕРВЕРОМ (avexample.by:80)
#
# Для работы HAPROXY требуется:
# 1. Файл с данными сертификата сервера (/opt/AvTLSSrv/conf/TLS/server.cer.pem).
# 2. Файл с личным ключом соответствующим сертификату (в том же файле, что и сертификат либо в файле server.cer.pem.key).
# 3. Файл с цепочкой сертификатов УЦ (от издателя до самоподписанного, важен порядок) для сертификата сервера в каталоге /opt/AvTLSSrv/conf/TLS/chain (см. переменную issuers-chain-path).
# 4. Файл с сертификатами издателя, которые могли быть использованы для выпуска сертификатов клиентов (/opt/AvTLSSrv/conf/TLS/client-issuer-ca.cer.pem (см. ca-file))
# 5. Файл с СОС УЦ для сертификатов клиентов (/opt/AvTLSSrv/conf/TLS/client-ca.crl.pem (см. crl-file))
# 6. Файл с корневыми сертификатами УЦ для сертификатов клиентов (/opt/AvTLSSrv/conf/TLS/client-root-ca.cer.pem (см. ca-verify-file)) 
#
# Примечание: 
# Для конкретной реализации необходимо заменить в разделах backend http_out и backend https_out подстроку "avexample.by" на адрес кокретного WEB-СЕРВЕРА

global
	# Вести обработку в файл с протоколом событий на 127.0.0.1 сохраняя в local0
#	log 127.0.0.1 local0 info

#	stats timeout 30s
#	user haproxy
#	group haproxy

	daemon
	pidfile /opt/AvTLSSrv/run/haproxy.pid

	# Загрузка avstb engine (openssl) - белорусские криптоалгоритмы
# не используется, начиная с haproxy версии 2.7
#	ssl-engine avstb algo ALL

	# каталог с файлами, в каждом из которых сертификаты УЦ из цепочки сертификатов сервера, передаваемой клиенту (от сертификата издателя до самоподписанного сертификат, порядок важен)
	issuers-chain-path /opt/AvTLSSrv/conf/TLS/chain

	# параметры по умолчанию для bind в разделе frontend
	ssl-default-bind-ciphers DHT-BIGN-WITH-BELT-CTR-MAC-HBELT:DHE-BIGN-WITH-BELT-CTR-MAC-HBELT:DHT-BIGN-WITH-BELT-DWP-HBELT:DHE-BIGN-WITH-BELT-DWP-HBELT
	# отключить возобнобновление сессии по состоянию сервера, сохраненному у клиента, использовать TLS 1.2
	ssl-default-bind-options no-tls-tickets force-tlsv12

defaults
	mode	tcp
	# Добавлять в протокол события о трафике
#	log	global
	# Определение расширенного формата записей протокола события
#	option	tcplog
	# Вывод сообщений в консоль при запуске с ключом "-d"
#	log stdout format short daemon          # send log to systemd
#	log stdout format raw daemon            # send everything to stdout
#	log stderr format raw daemon notice     # send important events to stderr

	timeout connect 5000
	timeout client  50000
	timeout server  50000

frontend https_in
	mode tcp

	# соединение с взаимной аутентификацией
	# verify required
	# ca-file - PEM-файл с сертификатами УЦ, информация о владельцах которых пересылается клиенту для выбора клиентом сертификата с необходимым издателем
	# ca-verify-file - PEM-файл с доверенными корневыми сертификатами УЦ, используемыми проверки сертификатов клиентов и, при необходимости, для построения цепочки сертификатов клиентов
	# crl-file - PEM-файл с СОС УЦ, используемыми при проверке сертификата клиента
	bind *:443 ssl crt /opt/AvTLSSrv/conf/TLS/server.cer.pem verify required ca-file /opt/AvTLSSrv/conf/TLS/issuers.pem ca-verify-file /opt/AvTLSSrv/conf/TLS/trusteds.pem crl-file /opt/AvTLSSrv/conf/TLS/crls.pem

	default_backend https_out

backend https_out
	mode http

#	Important - mode http
	http-request set-header X-Client-IP            %[src]
	http-request set-header X-SSL-Cer-Hex          %{+Q}[ssl_c_der,hex]
	http-request set-header X-SSL-Cer-Base64       %{+Q}[ssl_c_der,base64]
	http-request set-header X-SSL                  %[ssl_fc]
	http-request set-header X-SSL-Client-Verify    %[ssl_c_verify]
	http-request set-header X-SSL-Client-DN        %{+Q}[ssl_c_s_dn]
	http-request set-header X-SSL-Client-CN        %{+Q}[ssl_c_s_dn(cn)]
	http-request set-header X-SSL-Issuer           %{+Q}[ssl_c_i_dn]
	http-request set-header X-SSL-Client-NotBefore %{+Q}[ssl_c_notbefore]
	http-request set-header X-SSL-Client-NotAfter  %{+Q}[ssl_c_notafter]
	
	balance roundrobin
	server node avexample.by:80 maxconn 50 check
