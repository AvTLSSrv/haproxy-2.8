# Работа по схеме - определение использования AVTUNPROXY у КЛИЕНТА ("двойной TLS") и использование работы в этом режиме:
#
#	КЛИЕНТ <-> AVTUNPROXY <-- ЗАЩИЩЕННЫЙ КАНАЛ - TLS-соединение с односторонней аутентификацией (белорусские криптонаборы) между AvTunProxy и HAProxy --> HAPROXY <-> WEB-СЕРВЕР
#	  |																				      |
#	 < >................................................ TLS-соединение (выполняется внутри защищенного канала)..........................................................< >
#
# Пояснение:
# AVTUNPROXY в начале TLS-обращения КЛИЕНТА к WEB-СЕРВЕРУ (предполагается, что адрес WEB-СЕРВЕРА включен в конфигурацию AVTUNPROXY для особого порядка обработки) устанавливает защищенный канал (TLS-соединение с использованием белорусских криптонаборов) между AVTUNPROXY и HAPROXY.
# Затем по защищенному каналу устанавливается TLS-соединение (белорусские криптонаборы не используются) между КЛИЕНТОМ и WEB-СЕРВЕРОМ.
#
# Для работы HAPROXY требуется:
# 1. Файл с данными сертификата сервера (/opt/AvTLSSrv/conf/TLS/server.cer.pem).
# 2. Файл с личным ключом соответствующим сертификату (в том же файле, что и сертификат либо в файле server.cer.pem.key).
# 3. Файл с цепочкой сертификатов УЦ (от издателя до самоподписанного, важен порядок) для сертификата сервера в каталоге /opt/AvTLSSrv/conf/TLS/chain (см. переменную issuers-chain-path).
#
# Примечание:
# 1. Данная конфигурация позволяет определить, используется ли для соединения режим "двойной TLS" (с использованием AVTUNPROXY). Если нет, то HAPROXY "отправляет" КЛИЕНТА для соединения с avexample.by:443.
# В случае использования режима "двойной TLS" HAPROXY после установки защищенного канала с AVTUNPROXY "отправляет" КЛИЕНТА для соединения с avexample.by:444.
# 2. Для конкретной реализации необходимо заменить в разделах backend подстроки "avexample.by" на адреса кокретного WEB-СЕРВЕРА
#
# ДЛЯ РАБОТЫ ПРИМЕРА НЕОБХОДИМО:
# 1. Адрес WEB-СЕРВЕРА должен быть включен в конфигурацию AVTUNPROXY для выполнения тунелирования
# 2. В случае настройки AVTUNPROXY на управление сертификатами "платформенное", сертификаты и СОС УЦ издателя avexample.by (для сертификата сервера HAPROXY) и из цепочки сертификата сервера должны быть корректно установлены с использованием Персонального менеджера сертификатов

global
	# Вести обработку в файл с протоколом событий на 127.0.0.1 сохраняя в local0
#	log 127.0.0.1 local0 info

#	stats timeout 30s
#	user haproxy
#	group haproxy

	daemon
	pidfile /opt/AvTLSSrv/run/haproxy.pid

	# Загрузка avstb engine (openssl) - белорусские криптоалгоритмы
# не используется, начиная с haproxy версии 2.7
#	ssl-engine avstb algo ALL

	# каталог с файлами, в каждом из которых сертификаты УЦ из цепочки сертификатов сервера, передаваемой клиенту (от сертификата издателя до самоподписанного сертификат, порядок важен)
	issuers-chain-path /opt/AvTLSSrv/conf/TLS/chain

	# параметры по умолчанию для bind в разделе frontend
	ssl-default-bind-ciphers DHT-BIGN-WITH-BELT-CTR-MAC-HBELT:DHE-BIGN-WITH-BELT-CTR-MAC-HBELT:DHT-BIGN-WITH-BELT-DWP-HBELT:DHE-BIGN-WITH-BELT-DWP-HBELT
	# отключить возобнобновление сессии по состоянию сервера, сохраненному у клиента, использовать TLS 1.2
	ssl-default-bind-options no-tls-tickets force-tlsv12

defaults
	mode	tcp
	# Добавлять в протокол события о трафике
#	log	global
	# Определение расширенного формата записей протокола события
#	option	tcplog
	# Вывод сообщений в консоль при запуске с ключом "-d"
#	log stdout format short daemon          # send log to systemd
#	log stdout format raw daemon            # send everything to stdout
#	log stderr format raw daemon notice     # send important events to stderr

	option http-server-close
	option abortonclose
	option redispatch

	timeout check           3s
	timeout client          30s  # Client and server timeout must match the longest
	timeout connect         5s
	timeout http-keep-alive 5s
	timeout http-request    10s  # A complete request may never take that long.
	timeout queue           1m   # Don't queue requests too long if saturated.
	timeout server          10s  # Time we may wait for a response from the server.
	
#	retries 3

frontend https_in
	mode tcp
	bind *:443
	tcp-request inspect-delay 5s
	tcp-request content accept if { req.ssl_hello_type 1 }	

	# проверка использования тунеля avtunproxy и в случае успеха переход для обработки
	acl find_AVTLSPROXY payload(0,10) -m bin 4156544c5350524f5859 # AVTLSPROXY
	filter placemark remove-label
	use_backend be_loopback_avtunproxy if find_AVTLSPROXY

	# использование avtunproxy не обнаружено, обработка по заданному урлу
	use_backend https_out if { req.ssl_sni -i avexample.by }

	# использование avtunproxy не обнаружено, обработка для других случаев
	default_backend https_out

#------------------------------------------------------
# Обработка в случае, если обнаружено использование avtunproxy
#------------------------------------------------------
backend be_loopback_avtunproxy
	mode tcp
	option ssl-hello-chk
	server loopback_avtunproxy abns@avtunproxy

frontend fe_loopback_avtunproxy
	mode tcp
	bind abns@avtunproxy
	tcp-request inspect-delay 5s
	tcp-request content accept if { req.ssl_hello_type 1 }

	# возможны разбор и обработка по SNI
	use_backend be_loopback_avtunproxy_sni if { req.ssl_sni -i avexample.by }
	
	default_backend be_loopback_avtunproxy_sni
	
backend be_loopback_avtunproxy_sni
	mode tcp
	server loopback_example abns@avtunproxy-sni
    
frontend fe_loopback_avtunproxy_sni
	mode tcp
	# обработка tls-соединения, организованного avtunproxy, с белорусскими криптоалгоритмами
	#  файл с цепочкой (если отсутствует в server.pem) - см. в параметре issuers-chain-path каталог файлов с цепочками сертификатов
	bind abns@avtunproxy-sni ssl crt /opt/AvTLSSrv/conf/TLS/server.cer.pem
	default_backend https_out_avtunproxy_example
	
backend https_out_avtunproxy_example
	mode tcp
	server node avexample.by:444 check

#------------------------------------------------------
# обработка, если НЕ обнаружено использование avtunproxy
#------------------------------------------------------
backend https_out
	mode tcp
	server node avexample.by:443 check
